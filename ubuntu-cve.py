#!/usr/bin/python3
from flask import Flask, escape, Response, json
import bz2
import requests
import os
import socket
import time
from datetime import datetime

port=10001
url="https://people.canonical.com/~ubuntu-security/cvescan/ubuntu-vuln-db-supported.json.bz2"
home_file_dir=str(os.path.expanduser("~"))+"/.cache/"

filename=url.rsplit("/")
filename=filename[len(filename)-1].rsplit(".",1)[0]

# colored console output
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# test if home_file_dir exists
if not os.path.isdir(home_file_dir):
    try:
        os.mkdir(home_file_dir)
    except OSError:
        print("ERROR: cant create Directory "+str(home_file_dir))
        exit(1)

def errorMsg(msg,type,retval):
    if type == "api":
        data={}
        data['status']=retval
        data['message']=str(msg)
        ret=data
    else:
        if retval == "ERROR":
            print(bcolors.FAIL+str(msg)+bcolors.ENDC)
        elif retval == "WARNING":
            print(bcolors.WARNING+str(msg)+bcolors.ENDC)
        elif retval == "OK":
            print(bcolors.OKGREEN+str(msg)+bcolors.ENDC)
        if retval == "OK":
            ret=0
        else:
            ret=-1
    return ret
    
def generate_session():
    session = requests.Session()
    hostname = socket.gethostname()
    session.headers.update({"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0"})
    return session

def checkUpdate(url,mode):
    filename=url.rsplit("/")
    filename=filename[len(filename)-1].rsplit(".",1)[0]
    session = generate_session()
    try:
        x=session.head(url)
    except session.exceptions.RequestException as e:
        ret=errorMsg("WARNING: Error during update check for newer Version, error code: "+str(e),mode,"ERROR")
        return ret
    if not x.ok:
        ret=errorMsg("ERROR: Error during update check for newer Version, error code: "+str(x.status_code),mode,"ERROR")
        return ret
    updatemsg="update not needed"
    ftime=0
    if os.path.isfile(home_file_dir+filename):
        ftime=os.path.getctime(home_file_dir+filename)
    if time.mktime(datetime.strptime(x.headers['Last-Modified'][:-4], "%a, %d %b %Y %H:%M:%S").timetuple()) > ftime:
        try:
            updatefile=session.get(url)
        except Exception as e:
            ret=errorMsg("WARNING: cant load new File from "+str(url)+", error code: "+str(e),mode,"ERROR")
            return ret
        try:
            with open(str(home_file_dir+filename),"wb") as fp:
                fp.write(bz2.decompress(updatefile.content))
                fp.close()
        except Exception as e:
            ret=errorMsg("WARNING: cant write new File: "+str(filename)+", error code: "+str(e),mode,"ERROR")
            return ret
        updatemsg="update successfully"
    ret=errorMsg(updatemsg,mode,"OK")
    return ret

def SearchCVE(filename,cveid,release):
    data=""
    try:
        with open(filename) as jsonfile:
            data = json.load(jsonfile)
    except Exception as e:
        retval={}
        retval['status']="ERROR"
        retval['message']=errorMsg("WARNING: cant open File: "+str(filename)+", error code: "+str(e),"api","ERROR")['message']
        retval['cve']=cveid
        return retval
    if cveid in data['data']:
        retval=[]
        if not release:
            retval.append(data['data'][cveid])
        else:
            if release in data['data'][cveid]['releases']:
                retval.append(data['data'][cveid]['releases'][release])
            else:
                status['status']="WARNING"
                status['message']="Relase not found in CVE"
                status['cve']=cveid
                status['release']=release
                return status
        status={}
        status['status']="OK"
        status['cve']=cveid
        if release:
            status['release']=release
        retval.append(status)
        return retval
    else:
        retval={}
        retval['status']="WARNING"
        retval['message']="CVE not found"
        retval['cve']=cveid
        return retval

app=Flask(__name__)
@app.route("/",methods=["GET"])
def root():
    html_css="<style>body,h2 {font-family:Arial;font-size:12pt;}h2 {font-size:16pt;} table {border-collapse: collapse;}tr {color: black;background: white;border: 1px solid black;}tr_odd {color: black;background: lightgrey;border: 1px solid black;}td {border-right: 1px solid black;}</style>"
    HTML="<html><head><title>Ubuntu Security Tracker</title>"+html_css+"</head><body>"
    HTML+="<h2>Ubuntu Security Tracker</h2><br>Api is available, see <a href='/api'>this Link for description</a><br><br>\n"
    HTML+="</body></html>"
    return str(HTML)

@app.route("/api")
def apiText():
    data={}
    data['/api']="this message"
    data['/api/update']="update Security Tracker DB"
    data['/api/cve/<CVE>']="returns details from <CVE>"
    data['/api/cve/<CVE>/<RELEASE>']="returns details from <CVE> for <RELEASE>(focal, bionic etc.)"
    data['status']="ok"
    return Response(json.dumps(data),mimetype='application/json')

@app.route("/api/cve/<id>")
def searchCVEID(id):
    ret=SearchCVE(home_file_dir+filename,id,"")
    retcode=200
    if "status" in ret:
        if ret['status'] == "WARNING":
            retcode=404
        elif ret['status'] == "ERROR":
            retcode=500
    return Response(json.dumps(ret),mimetype='application/json'),retcode

@app.route("/api/cve/<id>/<release>")
def searchCVEIDRelease(id,release):
    ret=SearchCVE(home_file_dir+filename,id,release)
    retcode=200
    if "status" in ret:
        if ret['status'] == "WARNING":
            retcode=404
        elif ret['status'] == "ERROR":
            retcode=500
    return Response(json.dumps(ret),mimetype='application/json'),retcode

@app.route("/api/update")
def updateFile():
    ret=checkUpdate(url,"api")
    retcode=200
    if "status" in ret:
        if ret['status'] == "WARNING":
            retcode=404
        elif ret['status'] == "ERROR":
            retcode=500
    return Response(json.dumps(ret),mimetype='application/json'),retcode

checkUpdate(url,"console")
if __name__ == "__main__":
    app.run(host='0.0.0.0',port=port)
